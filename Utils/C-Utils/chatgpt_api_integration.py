#!/usr/bin/env python3

# description: This script integrates the ChatGPT API to fill README.md files with generated content.

import os
import requests

def fill_readme_with_chatgpt():
    """
    This function fills README.md files with content generated by ChatGPT.
    """
    
    # Retrieve the ChatGPT API key from an environment variable
    chatgpt_api_key = os.environ.get("CHATGPT_API_KEY")
    
    # Define the API endpoint and headers
    api_endpoint = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {chatgpt_api_key}"
    }
    
    # Read the README_template.md file
    with open("/workspaces/code/Utils/C-Utils/README_template.md", "r") as template_file:
        template_content = template_file.read()
    
    # Loop through each directory to fill README.md files
    root_dir = "/workspaces/code"  # Specify the actual path based on your project structure
    
    for dirpath, dirnames, filenames in os.walk(root_dir):
        
        # Check if the directory has a README.md file
        if "README.md" not in filenames:
            continue
        
        # Generate content using ChatGPT API
        readme_path = os.path.join(dirpath, "README.md")
        
        prompt = f"{template_content}\nExplain the role and structure of the {os.path.basename(dirpath)} module."
        payload = {
            "prompt": prompt,
            "max_tokens": 100
        }
        
        response = requests.post(api_endpoint, headers=headers, json=payload)
        generated_text = response.json().get("choices")[0].get("text")
        
        # Append the generated content to README.md
        with open(readme_path, "a") as readme_file:
            readme_file.write(generated_text)
            
            print(f"Filled README.md for {dirpath} with ChatGPT generated content.")

if __name__ == "__main__":
    fill_readme_with_chatgpt()
