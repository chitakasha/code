#!/usr/bin/env python3

# description: This script integrates ChatGPT API to fill the README.md files.

import os
import requests
import json

def fill_readme_with_chatgpt():
    """
    This function fills the README.md files with content generated by ChatGPT.
    """
    
    # Define the root directory from where to start filling README files
    root_dir = "/workspaces/code"  # Specify the actual path based on your project structure
    
    # ChatGPT API endpoint and headers
    api_endpoint = "https://api.openai.com/v1/chat/completions"
    api_key = os.environ.get("CHATGPT_API_KEY", None)
    
    if api_key is None:
        print("Error: CHATGPT_API_KEY environment variable is not set.")
        return
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # Read the contents of README_template.md
    with open("README_template.md", "r") as template_file:
        template_content = template_file.read()
    
    # Loop through each directory and sub-directory to fill README.md files
    for dirpath, dirnames, filenames in os.walk(root_dir):
        
        # Skip directories that don't have a README.md file
        if "README.md" not in filenames:
            continue
        
        # Fill README.md file for the directory
        readme_path = os.path.join(dirpath, "README.md")
        
        # Prepare the payload for the API call
        prompt = f"Please generate and return the most appropriate content for the {readme_path} file in accordance with the template provided and the logic of ChitAkasha data structure and common sense. The contents of this readme file will be further used to develop modules and components of ChitAkasha quantum computing system. Template: {template_content}"
        payload = {"model": "gpt-4-0613", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": prompt}]}
        
        # Make the API call
        response = requests.post(api_endpoint, headers=headers, json=payload)
        
        if response.status_code == 200:
            try:
                generated_text = response.json().get("choices")[0].get("message").get("content")
                
                # Append the generated text to the README.md file
                with open(readme_path, "a") as readme_file:
                    readme_file.write(generated_text)
                    
            except TypeError as e:
                print(f"Error: {e}. Could not get generated text from ChatGPT.")
                print(f"API Response: {response.json()}")
                continue  # Skip to the next iteration
                
        else:
            print(f"Error: Received status code {response.status_code} from ChatGPT API.")
            print(f"API Response: {response.json()}")
            continue  # Skip to the next iteration

if __name__ == "__main__":
    fill_readme_with_chatgpt()
